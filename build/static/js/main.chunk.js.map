{"version":3,"sources":["jiraApiUtls.js","index.js"],"names":["makeJiraApiRequest","a","method","requestPath","body","fetch","headers","JSON","stringify","response","json","makeJqlRequest","jql","fields","resultPropertyPath","maxResults","startAt","allResultsReturned","totalNumberOfResults","total","concat","_","get","console","log","length","getIssuesLinkedToEpic","epicKey","isIssueUpdated","issue","getAttribute","markIssueUpdated","setAttribute","updatePoolIssues","issuePool","issuesInPool","getJiraIssues","forEach","addDaysInColumnField","addStoryPointsLabel","issueType","getIssueType","handleEpic","includes","storyPoints","getStoryPoints","getIssueKey","markIssueAsReady","markIssueNeedsAttention","epicIssue","issueKey","issuesLinkedToEpic","epicIssuesSummary","reduce","epicSummary","linkedIssue","status","name","customfield_11901","issuetype","totalNumberOfStoriesOrSpikes","totalStoryPoints","numberOfClosedStoriesOrSpikes","storyPointsCompleted","numberOfStoriesOrSpikesWithEstimates","totalNumberOfBugs","numberOfBugsClosed","key","addIssueField","querySelector","parentNode","remove","fieldId","fieldValue","extraFieldsDiv","insertAdjacentHTML","replace","parseFloat","storyPointsSpan","textContent","daysInColumn","getDaysInColumn","querySelectorAll","observer","MutationObserver","mutations","mutation","id","target","classAttr","document","observe","childList","subtree"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["import _ from 'lodash';\n\n/**\n * Issue a generic Jira API request\n * @param {*} param0 \n * @returns \n */\nexport const makeJiraApiRequest = async (\n  {\n    method='POST',\n    requestPath= \"\",\n    body\n  }\n) => {\n  const BASE_JIRA_API_PATH = '/rest/api/2';\n\n  const response = await fetch(\n    `${BASE_JIRA_API_PATH}/${requestPath}`,\n    {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body)\n    }\n  );\n\n  return await response?.json();\n}\n\nexport const makeJqlRequest = async (\n  {\n    jql,\n    fields = [],\n    resultPropertyPath = \"issues\",\n    maxResults = 50\n  }\n) => {\n  var startAt = 0;\n  var allResultsReturned = []\n  var totalNumberOfResults = 0;\n\n  do {\n    const response = await makeJiraApiRequest(\n      {\n        requestPath: \"search\",\n        body: {\n          jql,\n          fields,\n          startAt,\n          maxResults\n        }\n      }\n    );\n    \n    totalNumberOfResults = response?.total;\n    allResultsReturned = \n      allResultsReturned.concat(\n        _.get(response, resultPropertyPath, [])\n      );\n    console.log(`Got ${allResultsReturned.length} of ${totalNumberOfResults} results for jql ${jql}`);\n    startAt = allResultsReturned?.length;\n  }while(totalNumberOfResults>allResultsReturned.length);\n\n  return allResultsReturned;\n}\n\nexport const getIssuesLinkedToEpic = async (\n  {\n    epicKey,\n    fields\n  }\n) => {\n  return await makeJqlRequest(\n    {\n      jql: `'Epic Link'=${epicKey}`,\n      fields\n    }\n  );\n}\n\nconst getIssuesLinkedToEpic2 = async epicKey => {\n\n  var issuesLinkedToEpic = [];\n  var startAt = 0;\n  var totalLinkedIssues;\n  const maxResults = 50;\n\n  do{\n    // \"Epic Link\" = CC-2\n    const response = await fetch(\n      \"/rest/api/2/search\",\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(\n          {\n            \"jql\":`'Epic Link'=${epicKey}`,\n            // To return custom fields, the pattern is \"customfield_<CUSTOM_FIELD_ID>\"\n            // To get the ID of a custom field GET <BASE_JIRA_URL>/rest/api/2/field and\n            // search for your custom field\n            // Field 11901 is Story Points \n            \"fields\":[\"key\",\"issuetype\", \"status\", \"customfield_11901\"],\n            \"maxResults\" : maxResults,       \n            \"startAt\":startAt\n           }\n        )\n      }\n    );\n\n    const epicIssuesResponse = await response?.json();\n    //console.log(`Response for epic ${epicKey}:\\n${JSON.stringify(epicIssuesResponse, null, 2)}`);\n    //console.log(`Retrieved ${epicIssuesResponse?.issues.length} issues for epic ${epicKey}`);\n    issuesLinkedToEpic = issuesLinkedToEpic.concat(epicIssuesResponse?.issues);\n    //console.log(`Fetched ${issuesLinkedToEpic?.length} of ${epicIssuesResponse?.total} for ${epicKey}`);\n\n\n    startAt=issuesLinkedToEpic?.length;\n    totalLinkedIssues = epicIssuesResponse?.total;\n\n  }while(totalLinkedIssues>issuesLinkedToEpic?.length);\n\n  return issuesLinkedToEpic;\n}","\nimport {getIssuesLinkedToEpic, makeJqlRequest} from './jiraApiUtls'\n\nconst getIssuesLinkedToEpic2 = async epicKey => {\n\n  const jqlResults =  await makeJqlRequest(\n    {\n        jql:`'Epic Link'=${epicKey}`,\n        // To return custom fields, the pattern is \"customfield_<CUSTOM_FIELD_ID>\"\n        // To get the ID of a custom field GET <BASE_JIRA_URL>/rest/api/2/field and\n        // search for your custom field\n        // Field 11901 is Story Points \n        fields:[\"key\",\"issuetype\", \"status\", \"customfield_11901\"]\n      }\n  );\n\n  return jqlResults?.issues??[];\n\n  /*\n  var issuesLinkedToEpic = [];\n  var startAt = 0;\n  var totalLinkedIssues;\n  const maxResults = 50;\n\n  do{\n    // \"Epic Link\" = CC-2\n    const response = await fetch(\n      \"/rest/api/2/search\",\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(\n          {\n            \"jql\":`'Epic Link'=${epicKey}`,\n            // To return custom fields, the pattern is \"customfield_<CUSTOM_FIELD_ID>\"\n            // To get the ID of a custom field GET <BASE_JIRA_URL>/rest/api/2/field and\n            // search for your custom field\n            // Field 11901 is Story Points \n            \"fields\":[\"key\",\"issuetype\", \"status\", \"customfield_11901\"],\n            \"maxResults\" : maxResults,       \n            \"startAt\":startAt\n           }\n        )\n      }\n    );\n\n    const epicIssuesResponse = await response?.json();\n    //console.log(`Response for epic ${epicKey}:\\n${JSON.stringify(epicIssuesResponse, null, 2)}`);\n    //console.log(`Retrieved ${epicIssuesResponse?.issues.length} issues for epic ${epicKey}`);\n    issuesLinkedToEpic = issuesLinkedToEpic.concat(epicIssuesResponse?.issues);\n    //console.log(`Fetched ${issuesLinkedToEpic?.length} of ${epicIssuesResponse?.total} for ${epicKey}`);\n\n\n    startAt=issuesLinkedToEpic?.length;\n    totalLinkedIssues = epicIssuesResponse?.total;\n\n  }while(totalLinkedIssues>issuesLinkedToEpic?.length);\n\n  return issuesLinkedToEpic;\n  */\n}\n\nconst isIssueUpdated = (issue) => {\n  return issue?.getAttribute('modified-by-extension')\n}\n\nconst markIssueUpdated = (issue) => {\n  console.log(`Setting modifiedByExtension`);\n  issue.setAttribute('modified-by-extension', 'true');\n}\n\n/**\n * Find all Jira issue cards that are descendants \n * @param {*} issuePool \n * @returns NodeList of Jira issue cards\n */\nconst updatePoolIssues = async issuePool => {\n  const issuesInPool = getJiraIssues(issuePool);\n\n  issuesInPool?.forEach(\n    issue => {\n      if(!isIssueUpdated(issue)) {\n        addDaysInColumnField(issue);\n        addStoryPointsLabel(issue);    \n\n        const issueType = getIssueType(issue);\n\n        if(issueType === 'Epic') {\n          handleEpic(issue);\n        } else if(['Story', 'Spike'].includes(issueType)){\n          const storyPoints = getStoryPoints(issue);\n          console.log(`${storyPoints} points for issue ${getIssueKey(issue)}`);\n          if(storyPoints >0 ) {\n            markIssueAsReady(issue);\n          } \n          else {\n            markIssueNeedsAttention(issue);\n          }\n        } else if(['Bug'].includes(issueType)) {\n          issue.setAttribute(\"style\", \"background-color:LightPink;\" );\n        }\n      \n        //console.log(`found ghx-pool issue ${getIssueKey(issue)} ${getIssueType(issue)}`);\n        markIssueUpdated(issue);  \n      } else {\n        console.log(`Ignoring updated issue`);\n      }\n    }\n  );\n}\n\nconst markIssueNeedsAttention = (issue) => {\n  if(getIssueType(issue) === 'Epic') {\n    issue.setAttribute(\"style\", \"background-color:BurlyWood;\" );\n  } else {\n    issue.setAttribute(\"style\", \"background-color:Khaki;\" );\n  }\n}\n\nconst markIssueAsReady = (issue) => {\n  if(getIssueType(issue) === 'Epic') {\n    issue.setAttribute(\"style\", \"background-color:MediumTurquoise;\" );\n  } else {\n    issue.setAttribute(\"style\", \"background-color:PaleTurquoise;\" );\n  } \n}\n\nconst handleEpic = async epicIssue => {\n  const issueKey = getIssueKey(epicIssue);\n  console.log(`Handling Epic ${issueKey}`);\n\n  const issuesLinkedToEpic = await getIssuesLinkedToEpic(\n    {\n      epicKey: issueKey,\n      fields: [\"key\",\"issuetype\", \"status\", \"customfield_11901\"]\n    }\n  );\n\n  console.log(`Got ${issuesLinkedToEpic.length} issues for epic ${issueKey}`);\n  const epicIssuesSummary = issuesLinkedToEpic?.reduce(\n    (epicSummary, linkedIssue) => {\n      const status = linkedIssue?.fields?.status?.name;\n      const storyPoints = linkedIssue?.fields?.customfield_11901;\n      const issueType = linkedIssue?.fields?.issuetype.name;\n\n      if(['Story', 'Spike'].includes(issueType)) {\n        epicSummary.totalNumberOfStoriesOrSpikes++;\n        epicSummary.totalStoryPoints += storyPoints;\n\n        if(status === 'Closed') {\n          epicSummary.numberOfClosedStoriesOrSpikes++;\n          epicSummary.storyPointsCompleted += storyPoints;\n        }\n\n        if(storyPoints > 0) {\n          epicSummary.numberOfStoriesOrSpikesWithEstimates++;\n        }\n      } else if (['Bug'].includes(issueType)){\n        epicSummary.totalNumberOfBugs++;\n\n        if(status === 'Closed') {\n          epicSummary.numberOfBugsClosed++;\n        }\n      }\n      \n      console.log(`Reducing issue ${linkedIssue.key} (${status}) for epic ${issueKey}`);\n      return epicSummary;\n    }, \n    {\n      totalNumberOfStoriesOrSpikes: 0,\n      numberOfStoriesOrSpikesWithEstimates: 0,\n      numberOfClosedStoriesOrSpikes: 0,\n      totalNumberOfBugs: 0,\n      numberOfBugsClosed: 0,\n      totalStoryPoints: 0,\n      storyPointsCompleted: 0\n    } \n  )??{};\n  \n  addIssueField(epicIssue, \"issuesEstimated\", `${epicIssuesSummary?.numberOfStoriesOrSpikesWithEstimates} of ${epicIssuesSummary?.totalNumberOfStoriesOrSpikes} stories estimated`);\n  addIssueField(epicIssue, \"storiesCompleted\", `${epicIssuesSummary?.numberOfClosedStoriesOrSpikes} of ${epicIssuesSummary?.totalNumberOfStoriesOrSpikes} stories completed`);\n  addIssueField(epicIssue, \"storyPointsCompleted\", `${epicIssuesSummary?.storyPointsCompleted} of ${epicIssuesSummary?.totalStoryPoints} points completed`);\n  addIssueField(epicIssue, \"bugsClosed\", `${epicIssuesSummary?.numberOfBugsClosed} of ${epicIssuesSummary?.totalNumberOfBugs} bugs closed`);\n\n  // Remove story points field from Epic\n  epicIssue?.querySelector(\"span[id='labeledStoryPointsField']\")?.parentNode?.remove();\n\n  if(\n    epicIssuesSummary.numberOfStoriesOrSpikesWithEstimates === 0 \n    ||\n    (epicIssuesSummary.totalNumberOfStoriesOrSpikes != epicIssuesSummary.numberOfStoriesOrSpikesWithEstimates)\n    \n   ) {\n    markIssueNeedsAttention(epicIssue);\n  } else if (\n    epicIssuesSummary.numberOfStoriesOrSpikesWithEstimates > 0 &&\n    epicIssuesSummary.totalNumberOfStoriesOrSpikes === epicIssuesSummary.numberOfStoriesOrSpikesWithEstimates\n  ) {\n    markIssueAsReady(epicIssue);\n  }\n\n  //console.log(`ghx-pool response: Epic ${issueKey} has ${epicIssuesSummary.numberOfIssues} linked issues`);\n}\n\nconst addIssueField = (issue, fieldId, fieldValue )=> {\n  //console.log(`Adding field ${fieldId}`);\n  // If the daysInColumnField hasn't already been added\n  if(!issue.querySelector(`span[id='${fieldId}']`)) {\n    \n    // Get the extra fields section\n    const extraFieldsDiv = issue.querySelector(\"div[class='ghx-extra-fields']\");\n\n    if (extraFieldsDiv) {\n\n      extraFieldsDiv.insertAdjacentHTML(\n        'beforeend', \n        `<div class=\"ghx-extra-field-row\"><span class=\"ghx-extra-field\" id=\"${fieldId}\" data-tooltip=\"${fieldValue}\"><span class=\"ghx-extra-field-content\">${fieldValue}</span></span></div>` \n      );\n    }\n  }\n}\n\nconst getIssueKey = issue => {\n  const issueType = issue?.getAttribute(\"data-issue-key\");\n  return issueType;\n}\n\n\nconst getIssueType = issue => {\n  const issueType = issue?.querySelector(\"span[class='ghx-type']\")?.getAttribute(\"title\");\n  return issueType;\n}\n\nconst getStoryPoints = issue => {\n  const storyPoints = \n    issue.querySelector(\"span[data-tooltip*='Story Points']\")?.\n    getAttribute(\"data-tooltip\")?.\n    replace(\"Story Points: \",\"\");\n\n    console.log(`${storyPoints} foo points for issue ${getIssueKey(issue)}`);\n  return parseFloat(storyPoints)??0.0;\n}\n\nconst addStoryPointsLabel = issue => {\n  //console.log(`Adding story points lable to issue ghx-pool issue`);\n\n  // If the daysInColumnField hasn't already been added\n  if(!issue.querySelector(\"span[id='labeledStoryPointsField']\")) {\n    const storyPointsSpan = issue.querySelector(\"span[data-tooltip*='Story Points:']\");\n\n    if(storyPointsSpan) {\n      const storyPoints = getStoryPoints(issue);\n      storyPointsSpan.textContent = `${storyPoints} story points`;\n      storyPointsSpan.setAttribute(\"id\", \"labeledStoryPointsField\");\n      //storyPointsSpan.setAttribute(\"data-tooltip\", `${storyPoints} story points`);\n    }\n  }\n}\n\nconst getDaysInColumn = issue => {\n  const daysInColumn = \n    issue.querySelector(\"div[class='ghx-days']\")?.\n    getAttribute(\"title\")?.\n    replace(\" days in this column\",\"\");\n\n  return daysInColumn??\"Unknown\"\n}\n\nconst addDaysInColumnField = issue => {\n  //console.log(`Adding days in columns to issue ghx-pool issue`);\n\n  // If the daysInColumnField hasn't already been added\n  if(!issue.querySelector(\"span[id='daysInColumnField']\")) {\n    \n    // Get the extra fields section\n    const extraFieldsDiv = issue.querySelector(\"div[class='ghx-extra-fields']\");\n\n    if (extraFieldsDiv) {\n\n      const daysInColumn = getDaysInColumn(issue);\n\n      extraFieldsDiv.insertAdjacentHTML(\n        'beforeend', \n        `<div class=\"ghx-extra-field-row\"><span class=\"ghx-extra-field\" id=\"daysInColumnField\" data-tooltip=\"${daysInColumn} days in column\"><span class=\"ghx-extra-field-content\">${daysInColumn} days in column</span></span></div>` \n      );\n    }\n  }\n}\n\nconst getJiraIssues = issuePool => {\n  return issuePool.querySelectorAll(\"div[class*='js-detailview']\");\n}\n\n/**\n * Document mutation obeserver\n */\n var observer = new MutationObserver(\n  (mutations) => {  \n      mutations.forEach(\n        mutation => {\n          \n          const id = mutation.target.getAttribute('id');\n          const classAttr = mutation.target.getAttribute('class');\n          //console.log(`mutation: id: ${id} class:${classAttr}`);\n          // If the issue pool has mutated...\n          if(id==='ghx-pool'\n           || classAttr?.includes('ghx-column')) \n          {\n            //console.log(`handling ghx-pool mutation`);\n            updatePoolIssues(mutation.target);\n        }      \n      } \n    )\n  }    \n);\n\n\nconst target = document.querySelector(\"html\");\nconst config = { childList:true, subtree:true};\n\n/**\n * Observe all mutations to the DOM\n * TODO: Optimize this later if necessary\n */\n\nobserver.observe(target, config);"],"sourceRoot":""}